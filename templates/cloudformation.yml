
Parameters:
  BuildkiteApiAccessToken:
    Description: Your Buildkite personal api access token
    Type: String
    NoEcho: true

  BuildkiteOrgSlug:
    Description: Your Buildkite organization slug
    Type: String

  UsePollerInstance:
    Description: Whether to use a polling instance for 30 second resolution
    Type: String
    Default: "false"
    AllowedValues: ["true","false"]

  KeyName:
    Description: The ssh keypair used to access the timer instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: default

Conditions:
    UsePollerInstance:
      !Equals [ "true", $(UsePollerInstance) ]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - events:PutRule
                  - events:PutTargets
                  - lambda:*
                  - cloudwatch:PutMetricData
                Resource: "*"

  CollectMetrics:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handle
      Role: $(LambdaExecutionRole[Arn])
      Code:
        S3Bucket: buildkite-cloudwatch-metrics-publisher
        S3Key: collect-metrics.zip
      Runtime: nodejs
      Timeout: 25

  InvokeCollectMetrics:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handle
      Role: $(LambdaExecutionRole[Arn])
      Code:
        ZipFile: |
          var aws = require('aws-sdk');
          var lambda = new aws.Lambda();
          exports.handle = function(event, context) {
            lambda.invoke({
              FunctionName: '$(CollectMetrics)',
              Payload: JSON.stringify({
                BuildkiteApiAccessToken: '$(BuildkiteApiAccessToken)',
                BuildkiteOrgSlug: '$(BuildkiteOrgSlug)'
              }, null, 2)
            }, function(error, data) {
              if (error) {
                context.done('error', error);
              }
              if(data.Payload){
               context.succeed(data.Payload)
              }
            });
          }
      Runtime: nodejs
      Timeout: 25

  LambdaTimerService:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handle
      Role: $(LambdaExecutionRole[Arn])
      Code:
        S3Bucket: buildkite-cloudwatch-metrics-publisher
        S3Key: lambda-timer.zip
      Runtime: nodejs
      Timeout: 25

  LambdaTimer:
    Type: Custom::LambdaTimer
    Properties:
      ServiceToken: $(LambdaTimerService[Arn])
      Name: $(AWS::StackName)-LambdaTimer
      ScheduleExpression: rate(5 minutes)
      LambdaArn: $(InvokeCollectMetrics[Arn])

  TimerInstanceIAMRole:
    Condition: UsePollerInstance
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: $(InvokeCollectMetrics[Arn])

  TimerInstanceProfile:
    Condition: UsePollerInstance
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(TimerInstanceIAMRole) ]

  TimerInstance:
    Condition: UsePollerInstance
    Type: AWS::EC2::Instance
    Properties:
      KeyName: $(KeyName)
      InstanceType: t2.nano
      ImageId: ami-8fcee4e5
      IamInstanceProfile: $(TimerInstanceProfile)
      UserData: !Base64 |
        #!/bin/bash -xv
        export AWS_DEFAULT_REGION=$(AWS::Region)
        while true ; do
          aws lambda invoke --function-name "$(InvokeCollectMetrics[Arn])" -
          sleep 30
        done
